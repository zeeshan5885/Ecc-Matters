Metadata-Version: 2.1
Name: gwdatafind
Version: 1.1.3
Summary: The GWDataFind data discovery client
Home-page: https://gwdatafind.readthedocs.io
Download-URL: https://pypi.org/project/gwdatafind
Author: Duncan Macleod
Author-email: duncan.macleod@ligo.org
License: GPL-3.0-or-later
Project-URL: Bug Tracker, https://git.ligo.org/gwdatafind/gwdatafind/-/issues/
Project-URL: Documentation, https://gwdatfind.readthedocs.io
Project-URL: Source Code, https://git.ligo.org/gwdatafind/gwdatafind.git
Classifier: Development Status :: 5 - Production/Stable
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Intended Audience :: Science/Research
Classifier: Natural Language :: English
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Astronomy
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: License :: OSI Approved :: MIT License
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: igwn-auth-utils (>=0.3.1)
Requires-Dist: ligo-segments
Provides-Extra: docs
Requires-Dist: numpydoc ; extra == 'docs'
Requires-Dist: sphinx (>=4.4.0) ; extra == 'docs'
Requires-Dist: sphinx-argparse ; extra == 'docs'
Requires-Dist: sphinx-automodapi ; extra == 'docs'
Requires-Dist: sphinx-rtd-theme ; extra == 'docs'
Provides-Extra: lint
Requires-Dist: flake8 ; extra == 'lint'
Requires-Dist: flake8-bandit ; extra == 'lint'
Requires-Dist: flake8-docstrings ; extra == 'lint'
Requires-Dist: radon ; extra == 'lint'
Provides-Extra: test
Requires-Dist: pytest (>=2.8.0) ; extra == 'test'
Requires-Dist: pytest-cov ; extra == 'test'
Requires-Dist: requests-mock ; extra == 'test'

# GWDataFind

The GWDataFind data discovery client.

The GWDataFind service allows users to query for the location of
Gravitational-Wave Frame (GWF) files containing data from the current
gravitational-wave detectors.

[![PyPI version](https://badge.fury.io/py/gwdatafind.svg)](http://badge.fury.io/py/gwdatafind)
[![Linux status](https://git.ligo.org/lscsoft/gwdatafind/badges/main/pipeline.svg)](https://git.ligo.org/lscsoft/gwdatafind/commits/main)
[![Windows status](https://ci.appveyor.com/api/projects/status/js6gql8960qa9pkl?svg=true)](https://ci.appveyor.com/project/duncanmmacleod/gwdatafind)
[![License](https://img.shields.io/pypi/l/gwdatafind.svg)](https://choosealicense.com/licenses/gpl-3.0/)
[![Documentation status](https://readthedocs.org/projects/gwdatafind/badge/?version=latest)](https://gwdatafind.readthedocs.io/en/latest/?badge=latest)

## Installation

The simplest installation is via `pip`:

```bash
python -m pip install gwdatafind
```

This package is also available as a Conda package:

```bash
conda install -c conda-forge gwdatafind
```

## Basic Usage

To find the URLs of all `H1_R` files for the LIGO-Hanford observatory in
a given GPS interval:

```python
>>> from gwdatafind import find_urls
>>> find_urls('H', 'H1_R', 1198800018, 1198800618)
```

To utillise connection pooling, create a `Session`:

```python
>>> from gwdatafind import (find_urls, Session)
>>> with Session() as sess:
...     for ifo in ("H", "L"):
...         urls[ifo] = find_urls(
...             ifo,
...             f"{ifo}1_R",
...             1198800018,
...             1198800618,
...             session=sess,
...         )

## On the command-line

GWDataFind can also be executed via the command-line client, for full details
run

```bash
$ python -m gwdatafind --help
```

For more documentation, see <https://gwdatafind.readthedocs.io/>.
